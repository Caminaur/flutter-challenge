import 'package:flutter_challenge/models/hive_models/models.dart';
import 'package:flutter_challenge/models/models.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:http/http.dart' as http;

enum Models { people, planet, starShipModel, vehicleModel }

final modelValues = EnumValues({
  "people": Models.people,
  "planet": Models.planet,
  "starShipModel": Models.starShipModel,
  "vehicleModel": Models.vehicleModel,
});

class EnumValues<T> {
  Map<String, T> map;
  late Map<T, String> reverseMap;

  EnumValues(this.map);

  Map<T, String> get reverse {
    if (reverseMap == null) {
      reverseMap = map.map((k, v) => new MapEntry(v, k));
    }
    return reverseMap;
  }
}

class SwapiDevApi {
  final String _baseUrl = 'swapi.dev';
  // ignore: prefer_typing_uninitialized_variables
  var client;

  openClient() {
    client = http.Client();
  }

  closeClient() {
    client.close();
  }

  Future<String> _getJsonData(String endpoint, [page = 0]) async {
    if (page != 0) {
      final url = Uri.https(_baseUrl, endpoint, {"page": "$page"});
      final response = await client.get(url);
      return response.body;
    }
    final url = Uri.https(_baseUrl, endpoint);
    final response = await client.get(url);
    return response.body;
  }

  Future<List<People>> getMovieCharacters(context, [pagina = 0]) async {
    final jsonData = await _getJsonData('api/people', pagina);
    final response = PersonajesLista.fromJson(jsonData);

    Box pageBox = Hive.box<CurrentPage>('page');
    final currentPage = (response.next != null)
        ? int.parse(response.next!.split('=')[1]) - 1
        : 0;

    final page =
        CurrentPage(page: currentPage, pageCount: response.results!.length);
    pageBox.put('page', page);
    return response.results!;
  }

  Future<String> getHomeWorld(String homeWorldUrl) async {
    String number = homeWorldUrl.split('/')[5];
    String endpoint = "api/planets/$number";
    final url = Uri.https(_baseUrl, endpoint);
    final response = await client.get(url);
    final jsonData = response.body;
    final r = Planet.fromJson(jsonData).name;

    return r;
  }

  Future<List<String>> getArray<T>(
      List<String> urlList, String objectName) async {
    List<String> array = [];

    for (String string in urlList) {
      String number = string.split('/')[5];
      String type = string.split('/')[4];
      String endpoint = "api/$type/$number";
      final url = Uri.https(_baseUrl, endpoint);
      final res = await client.get(url);
      final jsonData = res.body;

      final finalResponse =
          decodeFromJsonGeneric(modelValues.map(objectName), jsonData);

      array.add(finalResponse.name);
    }
    return array;
  }

  dynamic decodeFromJsonGeneric<T>(T object, dynamic jsonData) {
    return object.fromJson(jsonData);
  }
}
